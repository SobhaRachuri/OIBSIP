import java.util.ArrayList;
import java.util.Scanner;

class User {
    private int userId;
    private int pin;
    private double balance;

    public User(int userId, int pin, double balance) {
        this.userId = userId;
        this.pin = pin;
        this.balance = balance;
    }

    public int getUserId() {
        return userId;
    }

    public int getPin() {
        return pin;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        balance += amount;
    }

    public boolean withdraw(double amount) {
        if (balance >= amount) {
            balance -= amount;
            return true;
        }
        return false;
    }

    public boolean transfer(User recipient, double amount) {
        if (balance >= amount) {
            balance -= amount;
            recipient.deposit(amount);
            return true;
        }
        return false;
    }
}

class Transaction {
    private int userId;
    private String type;
    private double amount;

    public Transaction(int userId, String type, double amount) {
        this.userId = userId;
        this.type = type;
        this.amount = amount;
    }

    public int getUserId() {
        return userId;
    }

    public String getType() {
        return type;
    }

    public double getAmount() {
        return amount;
    }
}

public class ATMSystem {
    private static ArrayList<User> users = new ArrayList<>();
    private static ArrayList<Transaction> transactionHistory = new ArrayList<>();
    private static User currentUser;

    public static void main(String[] args) {
        // Add sample users (You should implement a way to manage user accounts)
        users.add(new User(1, 1234, 1000.0));
        users.add(new User(2, 5678, 1500.0));

        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.print("Enter User ID: ");
            int userId = scanner.nextInt();
            System.out.print("Enter PIN: ");
            int pin = scanner.nextInt();

            // Authenticate user
            currentUser = authenticateUser(userId, pin);

            if (currentUser != null) {
                System.out.println("Authentication successful.");
                displayMainMenu(scanner);
            } else {
                System.out.println("Authentication failed. Please try again.");
            }
        }
    }

    private static User authenticateUser(int userId, int pin) {
        for (User user : users) {
            if (user.getUserId() == userId && user.getPin() == pin) {
                return user;
            }
        }
        return null; // Authentication failed
    }

    private static void displayMainMenu(Scanner scanner) {
        while (true) {
            System.out.println("\nMain Menu:");
            System.out.println("1. View Transaction History");
            System.out.println("2. Withdraw");
            System.out.println("3. Deposit");
            System.out.println("4. Transfer");
            System.out.println("5. Quit");

            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    viewTransactionHistory();
                    break;
                case 2:
                    performWithdrawal(scanner);
                    break;
                case 3:
                    performDeposit(scanner);
                    break;
                case 4:
                    performTransfer(scanner);
                    break;
                case 5:
                    System.out.println("Thank you for using ATM. Goodbye!");
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }

    private static void viewTransactionHistory() {
        System.out.println("\nTransaction History:");
        for (Transaction transaction : transactionHistory) {
            System.out.println("User ID: " + transaction.getUserId() + ", Type: " + transaction.getType() + ", Amount: " + transaction.getAmount());
        }
    }

    private static void performWithdrawal(Scanner scanner) {
        System.out.print("Enter withdrawal amount: ");
        double amount = scanner.nextDouble();

        if (currentUser.withdraw(amount)) {
            transactionHistory.add(new Transaction(currentUser.getUserId(), "Withdrawal", amount));
            System.out.println("Withdrawal successful. New balance: " + currentUser.getBalance());
        } else {
            System.out.println("Insufficient funds for withdrawal.");
        }
    }

    private static void performDeposit(Scanner scanner) {
        System.out.print("Enter deposit amount: ");
        double amount = scanner.nextDouble();

        currentUser.deposit(amount);
        transactionHistory.add(new Transaction(currentUser.getUserId(), "Deposit", amount));
        System.out.println("Deposit successful. New balance: " + currentUser.getBalance());
    }

    private static void performTransfer(Scanner scanner) {
        System.out.print("Enter recipient's User ID: ");
        int recipientId = scanner.nextInt();
        User recipient = findUserById(recipientId);

        if (recipient != null) {
            System.out.print("Enter transfer amount: ");
            double amount = scanner.nextDouble();

            if (currentUser.transfer(recipient, amount)) {
                transactionHistory.add(new Transaction(currentUser.getUserId(), "Transfer to User " + recipientId, amount));
                System.out.println("Transfer successful. New balance: " + currentUser.getBalance());
            } else {
                System.out.println("Insufficient funds for transfer.");
            }
        } else {
            System.out.println("Recipient not found.");
        }
    }

    private static User findUserById(int userId) {
        for (User user : users) {
            if (user.getUserId() == userId) {
                return user;
            }
        }
        return null; // User not found
    }
}
